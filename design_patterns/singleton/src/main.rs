// 单例模式( Singleton )
//
// 定义: 确保一个 类/结构体 只有一个实例，并提供一个全局访问点
//
// 使用场景:  当系统中需要一个类来控制资源的访问，确保资源不被重复创建时
//
// 实现方式:   判断实例是否已经存在，如果已经存在则直接返回，否则创建实例
//
// 单例模式的优点:
//    - 内存中只有一个实例，减少内存的开销，避免频繁地创建和销毁实例
//    - 避免了对资源的过度占用

fn main() {
    println!("Hello, world!");
}
